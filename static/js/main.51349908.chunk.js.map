{"version":3,"sources":["components/ConversationSearch/index.js","utils/debounce.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/ConversationList/index.js","components/Compose/index.js","components/Message/index.js","components/MessageList/index.js","utils/respond-mock-result.js","components/Messenger/index.js","serviceWorker.js","index.js","components/App/index.js"],"names":["ConversationSearch","_this","this","func","wait","immediate","timeout","debounce","query","text","lowText","toLowerCase","lowQuery","splitText","split","res","i","forEach","t","idx","ar","ar2","k","length","l","charAt","up","toUpperCase","push","join","highlightedText","react_default","a","createElement","className","type","onChange","e","console","log","target","value","placeholder","ConversationListItem","props","useEffect","shave","_props$data","data","photo","name","date","id","onConversationChange","currentDate","Date","toLocaleDateString","onClick","src","alt","Toolbar","title","leftItems","rightItems","ToolbarButton","icon","concat","ConversationList","sortedConversations","Toolbar_Toolbar","ToolbarButton_ToolbarButton","key","ConversationSearch_ConversationSearch","map","conversation","ConversationListItem_ConversationListItem","Compose","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","message","MY_USER_ID","MessageList","messages","messageCount","tempMessages","previous","current","next","author","messageId","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","Message_Message","renderMessages","Compose_Compose","RESPONSE_DELAY","respondMockResult","result","delay","arguments","undefined","Promise","resolve","setTimeout","Messenger","_useState","useState","_useState2","Object","slicedToArray","setConversations","_useState3","_useState4","setMessages","getConversations","getInitialMessages","conversations","then","response","results","picture","large","first","last","slice","sort","b","toConsumableArray","Error","ConversationList_ConversationList","messages1","messages2","messages3","messages4","MessageList_MessageList","Boolean","window","location","hostname","match","ReactDOM","render","Messenger_Messenger","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51349908.chunk.js","sourcesContent":["import React from 'react';\nimport './ConversationSearch.css';\nimport debounce from \"../../utils/debounce\";\n\nexport default function ConversationSearch() {\n\n    // 'тоже на будущее, про query я знаю)\n\n   const highlightedText = (text) => {\n        if (this.query) {\n            const lowText = text.toLowerCase();\n            const lowQuery = this.query.toLowerCase();\n            const splitText = lowText.split(lowQuery);\n            const res = [];\n            let i = 0;\n            splitText.forEach((t, idx) => {\n                const ar = [];\n                const ar2 = [];\n                for (let k = 0; k < t.length; k++) {\n                    const l = t.charAt(k);\n                    const up = text.charAt(i) === text.charAt(i).toUpperCase();\n                    ar.push(up ? l.toUpperCase() : l.toLowerCase());\n                    i += 1;\n                }\n                for (let k = 0; k < lowQuery.length; k++) {\n                    const l = lowQuery.charAt(k);\n                    const up = text.charAt(i) === text.charAt(i).toUpperCase();\n                    ar2.push(up ? l.toUpperCase() : l.toLowerCase());\n                    i += 1;\n                }\n                res.push(ar.join(''));\n                if (idx < splitText.length - 1) {\n                    res.push('<span class=\"hl\">' + ar2.join('') + '</span>');\n                }\n            });\n            return res.join('');\n        }\n        return text;\n    }\n\n    const highlightedTextHandler = debounce(query => {\n        highlightedText(query);\n    }, 500);\n\n    const inputHandler = e => {\n       console.log('input', e.target.value)\n    }\n\n\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          onChange={inputHandler}\n          className=\"conversation-search-input\"\n          placeholder=\"Найти в сообщениях\"\n        />\n      </div>\n    );\n}\n","export default function debounce(func, wait, immediate) {\n    let timeout;\n    return function () {\n        const context = this;\n        const args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n","import React, {useEffect} from 'react';\nimport shave from 'shave';\nimport './ConversationListItem.css';\n\nexport default function ConversationListItem(props) {\n    useEffect(() => {\n        shave('.conversation-snippet', 20);\n    })\n\n    const {photo, name, text, date, id} = props.data;\n    const {onConversationChange} = props;\n\n    const currentDate = new Date(date).toLocaleDateString('ru');\n\n    return (\n        <div className=\"conversation-list-item\" onClick={() => onConversationChange(id)}>\n            <img className=\"conversation-photo\" src={photo} alt=\"conversation\"/>\n            <div className=\"conversation-info\">\n                <h1 className=\"conversation-title\">{name}</h1>\n                <div className=\"conversation-date\">{currentDate}</div>\n                <p className=\"conversation-snippet\">{text}</p>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Toolbar.css';\n\nexport default function Toolbar(props) {\n    const { title, leftItems, rightItems } = props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n}","import React from 'react';\nimport './ToolbarButton.css';\n\n// это задел на будущее, потом все будет, если руки дойдут.\n\nexport default function ToolbarButton(props) {\n    const { icon } = props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n}\n","import React from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport './ConversationList.css';\n\nexport default function ConversationList(props) {\n\n    const {sortedConversations, onConversationChange} = props;\n\n    return (\n        <div className=\"conversation-list\">\n            <Toolbar\n                title=\"Чаты\"\n                leftItems={[\n                    <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\"/>\n                ]}\n                rightItems={[\n                    <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\"/>\n                ]}\n            />\n            <ConversationSearch/>\n            {\n                sortedConversations.map(conversation =>\n                    <ConversationListItem onConversationChange={onConversationChange}\n                        key={conversation.name}\n                        data={conversation}\n                        id={conversation.id}\n                    />\n                )\n            }\n        </div>\n    );\n}\n","import React from 'react';\nimport './Compose.css';\n\nexport default function Compose(props) {\n    return (\n      <div className=\"compose\">\n        <input\n          type=\"text\"\n          className=\"compose-input\"\n          placeholder=\"Введите сообщение\"\n        />\n\n        {\n          props.rightItems\n        }\n      </div>\n    );\n}\n","import React from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default function Message(props) {\n    const {\n        data,\n        isMine,\n        startsSequence,\n        endsSequence,\n        showTimestamp\n    } = props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n        <div className={[\n            'message',\n            `${isMine ? 'mine' : ''}`,\n            `${startsSequence ? 'start' : ''}`,\n            `${endsSequence ? 'end' : ''}`\n        ].join(' ')}>\n            {\n                showTimestamp &&\n                <div className=\"timestamp\">\n                    {friendlyTimestamp}\n                </div>\n            }\n            <div className=\"bubble-container\">\n                <div className=\"bubble\" title={friendlyTimestamp}>\n                    {data.message}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport './MessageList.css';\n\nconst MY_USER_ID = 'сталин';\n\nexport default function MessageList(props) {\n\n    const {messages} = props;\n\n    // Работаем с сообщениями, сортируем их в группах по времени получения\\отправки\n\n    const renderMessages = () => {\n        let i = 0;\n        let messageCount = messages.length;\n        let tempMessages = [];\n\n        while (i < messageCount) {\n            let previous = messages[i - 1];\n            let current = messages[i];\n            let next = messages[i + 1];\n            let isMine = current.author === MY_USER_ID;\n            let messageId = current.id\n            let currentMoment = moment(current.timestamp);\n            let prevBySameAuthor = false;\n            let nextBySameAuthor = false;\n            let startsSequence = true;\n            let endsSequence = true;\n            let showTimestamp = true;\n\n            if (previous) {\n                let previousMoment = moment(previous.timestamp);\n                let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n                prevBySameAuthor = previous.author === current.author;\n\n                if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n                    startsSequence = false;\n                }\n\n                if (previousDuration.as('hours') < 1) {\n                    showTimestamp = false;\n                }\n            }\n\n            if (next) {\n                let nextMoment = moment(next.timestamp);\n                let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n                nextBySameAuthor = next.author === current.author;\n\n                if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n                    endsSequence = false;\n                }\n            }\n\n            tempMessages.push(\n                <Message\n                    key={i}\n                    isMine={isMine}\n                    messageId={messageId}\n                    startsSequence={startsSequence}\n                    endsSequence={endsSequence}\n                    showTimestamp={showTimestamp}\n                    data={current}\n                />\n            );\n\n            // Переход к следующему сообщению в списке\n            i += 1;\n        }\n\n        return tempMessages;\n    }\n\n    return (\n        <div className=\"message-list\">\n            <Toolbar\n                title=\"Список сообщений\"\n                rightItems={[\n                    <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\"/>,\n                    <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\"/>,\n                    <ToolbarButton key=\"phone\" icon=\"ion-ios-call\"/>\n                ]}\n            />\n            <div className=\"message-list-container\">{renderMessages()}</div>\n            <Compose rightItems={[\n                <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\"/>,\n                <ToolbarButton key=\"image\" icon=\"ion-ios-image\"/>,\n                <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\"/>,\n                <ToolbarButton key=\"money\" icon=\"ion-ios-card\"/>,\n                <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\"/>,\n                <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\"/>\n            ]}/>\n        </div>\n    );\n}\n","const RESPONSE_DELAY = 0;\nexport function respondMockResult(result, delay = RESPONSE_DELAY) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(result);\n    }, delay);\n  });\n}\n","import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport {respondMockResult} from \"../../utils/respond-mock-result\";\nimport messages1 from \"../../assets/fixtures/messages-1.json\";\nimport messages2 from \"../../assets/fixtures/messages-2.json\";\nimport messages3 from \"../../assets/fixtures/messages-3.json\";\nimport messages4 from \"../../assets/fixtures/messages-4.json\";\nimport conversations from \"../../assets/fixtures/conversations.json\";\n\nexport default function Messenger() {\n    const [sortedConversations, setConversations] = useState([]);\n    let [messages, setMessages] = useState([]);\n\n\n    useEffect(() => {\n        getConversations()\n        getInitialMessages();\n    }, []);\n\n    const getConversations = () => {\n        try {\n            respondMockResult(conversations).then((response) => {\n                let newConversations = response.results.map(result => {\n                    return {\n                        photo: result.picture.large,\n                        name: `${result.name.first} ${result.name.last}`,\n                        text: 'Привет-привет! Тут супер-длинное сообщение, которое надо обрезать',\n                        date: result.date,\n                        id: result.id\n                    };\n                });\n                const sortedConversations = newConversations.slice().sort((a, b) => b.date - a.date);\n\n                setConversations([...sortedConversations]);\n            });\n        } catch (e) {\n            throw new Error(`Unable to get conversations. ${e}`);\n        }\n    };\n\n    const getInitialMessages = () => {\n        messages = [];\n        setMessages([...messages, ...messages]);\n    };\n\n    /*\n    * код ниже не очень красивый, но я не вижу иного способа. видимо неправильно понял задание, переписывать уже буду на TS на праздниках.\n    * еще не совсем понятно, как через хуки очищать стейт, кроме как пихать в него пустое значение. но я разберусь.\n    * сильно не бейте =)\n    * */\n\n    const onConversationChange = (id) => {\n        try {\n            if (id === '1') {\n                respondMockResult(messages1).then((response) => {\n                    getInitialMessages();\n                    setMessages([...messages, ...(response)]);\n                })\n            } else if (id === '2') {\n                respondMockResult(messages2).then((response) => {\n                    getInitialMessages();\n                    setMessages([...messages, ...(response)]);\n                })\n            } else if (id === '3') {\n                getInitialMessages();\n                respondMockResult(messages3).then((response) => {\n                    setMessages([...messages, ...(response)]);\n                })\n            } else if (id === '4') {\n                getInitialMessages();\n                respondMockResult(messages4).then((response) => {\n                    setMessages([...messages, ...(response)]);\n                })\n            }\n        } catch (e) {\n            throw new Error(`Unable to get messages. ${e}`);\n        }\n    };\n\n    return (\n        <div className=\"messenger\">\n            <div className=\"scrollable sidebar\">\n                <ConversationList sortedConversations={sortedConversations}\n                                  onConversationChange={onConversationChange}/>\n            </div>\n            <div className=\"scrollable content\">\n                <MessageList messages={messages}/>\n            </div>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Messenger from '../Messenger';\n\nexport default function App() {\n    return (\n      <div className=\"App\">\n        <Messenger />\n      </div>\n    );\n}"],"sourceRoot":""}